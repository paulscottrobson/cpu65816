// ====================================================================
//
//		@EAC 				add effective address calculation code.
//
//		CPUReadByte()		read byte at MA, put in MB8, return it
//		CPUReadWord()		read word at MA, put in MB16, return it
//		CPUWriteByte()		write MB8 to MA
//		CPUWriteWord()		write MB16 to MA,MA+1
//		CPUPush8/16(n)		push on stack
//		CPUPop8/16()		pop off stack, return value.
//
//		ALUSetZ8/16(n)		Set cpu.P.Z flag according to n
//		ALUSetNZ8/16(n)		Set cpu.P.Z and cpu.P.N flags according to n
//		ALUBitTest8/16(x,z)	Set cpu flags for BIT instruction. 2nd value is the register
//		ALUAdc8/16(a,b)		Do a+b calculation, uses C updates NZCV
//		ALUSbc8/16(a,b,f)	Do a-b calculation. f != 0 forces non decimal mode. Uses c,updates NZCV
//		ALUAsl8/16(&x)		Perform ASL on referenced byte (also LSR, ROL, ROR)
//
//		ALUExpandPS(n)		Given a PS value of n, copy into the flags
//		ALUBuildPS()		Convert the flags to an 8 bit constant
//		ALUUpdatePS()		Do any function required for emulation/sizing as flags updated
//
// ====================================================================

Group: (dir,X):1 stk,S:3 dir:5 [dir]:7 #imma:9 abs:D long:F (dir),Y:11 (dir):12 (stk,S),Y:13 dir,x:15 [dir],y:17 abs,y:19 abs,x:1D long,x:1F

"LDA *" A0
	A0X*		@EAC;cpu.A.B.L = CPUReadByte();ALUSetNZ8(cpu.A.B.L)
	A1X*		@EAC;cpu.A.W = CPUReadWord();ALUSetNZ16(cpu.A.W)

"STA *" 80
	A0X*		@EAC;MB8 = cpu.A.B.L;CPUWriteByte()
	A1X*		@EAC;MB16 = cpu.A.W;CPUWriteWord()

"ADC *"	60 	
	A0X*		@EAC;cpu.A.B.L = ALUAdc8(cpu.A.B.L,CPUReadByte())
	A1X*		@EAC;cpu.A.W = ALUAdc16(cpu.A.W,CPUReadWord())

"SBC *" E0
	A0X*		@EAC;cpu.A.B.L = ALUSbc8(cpu.A.B.L,CPUReadByte(),0)
	A1X*		@EAC;cpu.A.W = ALUSbc16(cpu.A.W,CPUReadWord(),0)

"CMP *" C0
	A0X*		@EAC;ALUSbc8(cpu.A.B.L,CPUReadByte(),1)
	A1X*		@EAC;ALUSbc16(cpu.A.W,CPUReadWord(),1)

"AND *" 20
	A0X*		@EAC;cpu.A.B.L = cpu.A.B.L & CPUReadByte();ALUSetNZ8(cpu.A.B.L)
	A1X*		@EAC;cpu.A.W = cpu.A.W & CPUReadWord();ALUSetNZ16(cpu.A.W)

"EOR *" 40
	A0X*		@EAC;cpu.A.B.L = cpu.A.B.L ^ CPUReadByte();ALUSetNZ8(cpu.A.B.L)
	A1X*		@EAC;cpu.A.W = cpu.A.W ^ CPUReadWord();ALUSetNZ16(cpu.A.W)

"ORA *" 00
	A0X*		@EAC;cpu.A.B.L = cpu.A.B.L | CPUReadByte();ALUSetNZ8(cpu.A.B.L)
	A1X*		@EAC;cpu.A.W = cpu.A.W | CPUReadWord();ALUSetNZ16(cpu.A.W)

// ====================================================================

Group: #immx:2 dir:6 abs:E dir,Y:16 abs,Y:1E

"LDX *" A0
	A*X0		@EAC;cpu.X.B.L = CPUReadByte();ALUSetNZ8(cpu.X.B.L)
	A*X1		@EAC;cpu.X.W = CPUReadWord();ALUSetNZ16(cpu.X.W)

"LDY *" 9E
	A*X0		@EAC;cpu.Y.B.L = CPUReadByte();ALUSetNZ8(cpu.X.B.L)
	A*X1		@EAC;cpu.Y.W = CPUReadWord();ALUSetNZ16(cpu.X.W)

Group: #immx:2 dir:6 abs:E dir,X:16

"STX *" 80
	A*X0		@EAC;MB8 = cpu.X.B.L;CPUWriteByte()
	A*X1		@EAC;MB16 = cpu.X.W;CPUWriteWord()

"STY *" 7E
	A*X0		@EAC;MB8 = cpu.Y.B.L;CPUWriteByte()
	A*X1		@EAC;MB16 = cpu.Y.W;CPUWriteWord()

Group: dir:64 dir,X:74 abs:9C abs,X:9E

"STZ *" 00 		
	A0X*		@EAC;MB8 = 0;CPUWriteByte()
	A1X*		@EAC;MB16 = 0;CPUWriteWord()


// ====================================================================

Group: #immx:0 dir:4 abs:c

"CPX *"	E0
	A*X0		@EAC;ALUSbc8(cpu.X.B.L,CPUReadByte(),1)
	A*X1		@EAC;ALUSbc16(cpu.X.W,CPUReadWord(),1)

"CPY *" C0
	A*X0		@EAC;ALUSbc8(cpu.Y.B.L,CPUReadByte(),1)
	A*X1		@EAC;ALUSbc16(cpu.Y.W,CPUReadWord(),1)

// ====================================================================

Group: dir:0 abs:8 dir,x:10 abs,x:18

"DEC *"	C6
	A0X* 		@EAC;CPUReadByte();MB8--;CPUWriteByte();ALUSetNZ8(MB8)
	A1X* 		@EAC;CPUReadWord();MB16--;CPUWriteWord();ALUSetNZ16(MB16)

"DEC" 	3A
	A0X* 		cpu.A.B.L--;ALUSetNZ8(cpu.A.B.L)
	A1X*		cpu.A.W--;ALUSetNZ16(cpu.A.W)

"DEX" 	CA
	A0X* 		cpu.X.B.L--;ALUSetNZ8(cpu.X.B.L)
	A1X*		cpu.X.W--;ALUSetNZ16(cpu.X.W)

"DEY" 	88
	A0X* 		cpu.Y.B.L--;ALUSetNZ8(cpu.Y.B.L)
	A1X*		cpu.Y.W--;ALUSetNZ16(cpu.Y.W)

"INC *" E6
	A0X* 		@EAC;CPUReadByte();MB8++;CPUWriteByte();ALUSetNZ8(MB8)
	A1X* 		@EAC;CPUReadWord();MB16++;CPUWriteWord();ALUSetNZ16(MB16)

"INC" 	1A
	A0X* 		cpu.A.B.L++;ALUSetNZ8(cpu.A.B.L)
	A1X*		cpu.A.W++;ALUSetNZ16(cpu.A.W)

"INX" 	E8
	A0X* 		cpu.X.B.L++;ALUSetNZ8(cpu.X.B.L)
	A1X*		cpu.X.W++;ALUSetNZ16(cpu.X.W)

"INY" 	C8
	A0X* 		cpu.Y.B.L++;ALUSetNZ8(cpu.Y.B.L)
	A1X*		cpu.Y.W++;ALUSetNZ16(cpu.Y.W)

"BIT *"	24 	
	A0X* 		@EAC;ALUBitTest8(CPUReadByte(),cpu.A.B.L)
	A1X*		@EAC;ALUBitTest16(CPUReadWord(),cpu.A.W)

Group: #imm8:0

"BIT *"	89
	A0X*		@EAC;ALUSetZ8(CPUReadByte() & cpu.A.B.L)
	A1X* 		@EAC;ALUSetZ16(CPUReadWord() & cpu.A.W)

// ====================================================================

Group: dir:0 abs:8

"TRB *" 14
	A0X* 		@EAC;CPUReadByte();ALUSetZ8(MB8 & cpu.A.B.L);MB8 &= (cpu.A.B.L ^ 0xFF);CPUWriteByte()
	A1X* 		@EAC;CPUReadWord();ALUSetZ16(MB16 & cpu.A.W);MB16 &= (cpu.A.W ^ 0xFFFF);CPUWriteWord()	

"TSB *" 04		
	A0X* 		@EAC;CPUReadByte();ALUSetZ8(MB8 & cpu.A.B.L);MB8 |= cpu.A.B.L;CPUWriteByte()
	A1X* 		@EAC;CPUReadWord();ALUSetZ16(MB16 & cpu.A.W);MB16 |= cpu.A.W;CPUWriteWord()		

// ====================================================================

Group: dir:0 abs:8 dir,x:10 abs,x:18

"ASL *" 06		
	A0X*		@EAC;CPUReadByte();ALUAsl8(&MB8);CPUWriteByte()
	A1X*		@EAC;CPUReadWord();ALUAsl16(&MB16);CPUWriteWord()	
"ASL A" 0A
	A0X*		ALUAsl8(&cpu.A.B.L)
	A1X*		ALUAsl16(&cpu.A.W)

"LSR *" 46		
	A0X*		@EAC;CPUReadByte();ALULsr8(&MB8);CPUWriteByte()
	A1X*		@EAC;CPUReadWord();ALULsr16(&MB16);CPUWriteWord()	
"LSR A" 4A
	A0X*		ALULsr8(&cpu.A.B.L)
	A1X*		ALULsr16(&cpu.A.W)

"ROL *" 26		
	A0X*		@EAC;CPUReadByte();ALURol8(&MB8);CPUWriteByte()
	A1X*		@EAC;CPUReadWord();ALURol16(&MB16);CPUWriteWord()	
"ROL A" 2A
	A0X*		ALURol8(&cpu.A.B.L)
	A1X*		ALURol16(&cpu.A.W)

"ROR *" 66		
	A0X*		@EAC;CPUReadByte();ALURor8(&MB8);CPUWriteByte()
	A1X*		@EAC;CPUReadWord();ALURor16(&MB16);CPUWriteWord()	
"ROR A" 6A
	A0X*		ALURor8(&cpu.A.B.L)
	A1X*		ALURor16(&cpu.A.W)

// ====================================================================

"BCC rel8" 90
	A*X* 		@EAC;if (cpu.P.C == 0) cpu.PC = MA

"BCS rel8" B0
	A*X* 		@EAC;if (cpu.P.C != 0) cpu.PC = MA

"BEQ rel8" F0
	A*X* 		@EAC;if (cpu.P.Z != 0) cpu.PC = MA

"BMI rel8" 30
	A*X* 		@EAC;if (cpu.P.M != 0) cpu.PC = MA

"BNE rel8" D0
	A*X* 		@EAC;if (cpu.P.Z == 0) cpu.PC = MA

"BPL rel8" 10
	A*X* 		@EAC;if (cpu.P.M == 0) cpu.PC = MA

"BRA rel8" 80
	A*X* 		@EAC;cpu.PC = MA

"BVC rel8" 50
	A*X* 		@EAC;if (cpu.P.V == 0) cpu.PC = MA

"BVS rel8" 70
	A*X* 		@EAC;if (cpu.P.V != 0) cpu.PC = MA

"BRL rel16" 82
	A*X* 		@EAC;cpu.PC = MA

// ====================================================================

Group: abs:4C (jabs):6C (jabs,x):7C

"JMP *" 00 
	A*X* 		@EAC;cpu.PC = (MA & 0xFFFF) | (cpu.PC & 0xFF0000)

"JMP long" 5C
	A*X* 		@EAC;cpu.PC = MA

"JMP [jabs]" DC
	A*X* 		@EAC;cpu.PC = MA

"JSL long" 22
	A*X* 		@EAC;cpu.PC--;CPUPush16(cpu.PC & 0xFFFF);CPUPush8(cpu.PC >> 16);cpu.PC = MA

Group: abs:20 (jabs,x):FC

"JSR *" 00
	A*X*		@EAC;cpu.PC--;CPUPush16(cpu.PC & 0xFFFF);cpu.PC = (MA & 0xFFFF) | (cpu.PC & 0xFF0000)		

// ====================================================================

"RTL" 6B
	A*X*		cpu.PC = CPUPop16();cpu.PC |= (CPUPop8() << 16);cpu.PC++

"RTS" 60
	A*X* 		cpu.PC = (cpu.PC & 0xFF0000) | CPUPop16();cpu.PC++

"RTI" 40
	A*X* 		ALUExpandPS(CPUPop8());cpu.PC = CPUPop16();cpu.PC |= (CPUPop8() << 16);ALUUpdatePS()

// ====================================================================

"BRK" 00
	A*X*		CPUPush8(cpu.PC >> 16);CPUPush16(cpu.PC+1);CPUPush8(ALUBuildPS());MA = 0xFFE6;CPUReadWord();cpu.PC = MB16

"COP" 02
	A*X*		CPUPush8(cpu.PC >> 16);CPUPush16(cpu.PC+1);CPUPush8(ALUBuildPS());MA = 0xFFF4;CPUReadWord();cpu.PC = MB16

// ====================================================================

"CLC" 18
	A*X* 		cpu.P.C = 0

"CLD" D8
	A*X* 		cpu.P.D = 0

"CLI" 58
	A*X* 		cpu.P.I = 0

"CLV" B8
	A*X* 		cpu.P.V = 0

"SEC" 38
	A*X* 		cpu.P.C = 1

"SED" F8
	A*X* 		cpu.P.D = 1

"SEI" 78
	A*X* 		cpu.P.I = 1

"REP #imm8" C2
	A*X*		@EAC;ALUExpandPS(ALUBuildPS() & (CPUReadByte()^0xFF));ALUUpdatePS()

"SEP #imm8" E2
	A*X*		@EAC;ALUExpandPS(ALUBuildPS() | CPUReadByte());ALUUpdatePS()

// ====================================================================

"NOP" EA 
	A*X* 		

"WDM" 42 
	A*X* 		cpu.PC++

// ====================================================================

"PEA #imm16" F4 
	A*X*		@EAC;CPUPush16(CPUReadWord())

"PEI dir" D4 
	A*X* 		@EAC;CPUPush16(CPUReadWord())

"PER rel16" 62 
	A*X* 		@EAC;CPUPush16(MA & 0xFFFF)

// ====================================================================

"PHA"	48
	A0X*		CPUPush8(cpu.A.B.L)
	A1X* 		CPUPush16(cpu.A.W)

"PHX"	DA
	A*X0		CPUPush8(cpu.X.B.L)
	A*X1 		CPUPush16(cpu.X.W)

"PHY"	5A
	A*X0		CPUPush8(cpu.Y.B.L)
	A*X1 		CPUPush16(cpu.Y.W)

"PLA"	68
	A0X*		cpu.A.B.L = CPUPop8();ALUSetNZ8(cpu.A.B.L)
	A1X* 		cpu.A.W = CPUPop16();ALUSetNZ16(cpu.A.W)

"PLX"	FA
	A*X0		cpu.X.B.L = CPUPop8();ALUSetNZ8(cpu.X.B.L)
	A*X1 		cpu.X.W = CPUPop16();ALUSetNZ16(cpu.X.W)

"PLY"	7A
	A*X0		cpu.Y.B.L = CPUPop8();ALUSetNZ8(cpu.Y.B.L)
	A*X1 		cpu.Y.W = CPUPop16();ALUSetNZ16(cpu.Y.W)

// ====================================================================

"PHK"	4B
	A*X*		CPUPush8(cpu.PC >> 16)

"PHP"	08
	A*X*		CPUPush8(ALUBuildPS())

"PLP"	28
	A*X* 		MB8 = CPUPop8();ALUExpandPS(MB8);ALUUpdatePS()

"PHB"	8B 	
	A*X*		CPUPush8(cpu.DBR)

"PLB"	AB 
	A*X*		cpu.DBR = CPUPop8();ALUSetNZ8(cpu.DBR)

"PHD" 	0B
	A*X*		CPUPush16(cpu.D)

"PLD"	2B
	A*X*		cpu.D = CPUPop16();ALUSetNZ16(cpu.D)



"TAX" AA
	A*X0		cpu.X.B.L = cpu.A.B.L;ALUSetNZ8(cpu.X.B.L)
	A*X1		cpu.X.W = cpu.A.W;ALUSetNZ16(cpu.X.W)

"TAY" A8
	A*X0		cpu.Y.B.L = cpu.A.B.L;ALUSetNZ8(cpu.Y.B.L)
	A*X1		cpu.Y.W = cpu.A.W;ALUSetNZ16(cpu.Y.W)

"TYX" BB
	A*X0		cpu.X.B.L = cpu.Y.B.L;ALUSetNZ8(cpu.X.B.L)
	A*X1		cpu.X.W = cpu.Y.W;ALUSetNZ16(cpu.X.W)

"TXY" 9B
	A*X0		cpu.Y.B.L = cpu.X.B.L;ALUSetNZ8(cpu.Y.B.L)
	A*X1		cpu.Y.W = cpu.X.W;ALUSetNZ16(cpu.Y.W)

"TXA" 8A
	A0X* 		cpu.A.B.L = cpu.X.B.L;ALUSetNZ8(cpu.A.B.L)
	A1X*		cpu.A.W = cpu.X.W;ALUSetNZ16(cpu.A.W)

"TYA" 98
	A0X* 		cpu.A.B.L = cpu.Y.B.L;ALUSetNZ8(cpu.A.B.L)
	A1X*		cpu.A.W = cpu.Y.W;ALUSetNZ16(cpu.A.W)

"TSX" BA
	A0X*		cpu.X.B.L = cpu.S & 0xFF;ALUSetNZ8(cpu.X.B.L)
	A1X*		cpu.X.W = cpu.S;ALUSetNZ16(cpu.X.W)

"TXS" 9A
	A0X* 		cpu.S = cpu.X.B.L;ALUSetNZ8(cpu.X.B.L)
	A1X*		cpu.S = cpu.X.W 			// Doesn't set NZ

// ====================================================================

"TCD" 5B
	A*X* 		cpu.D = cpu.A.W;ALUSetNZ16(cpu.D)

"TCS" 1B
	A*X* 		cpu.S = cpu.A.W 			// Doesn't set NZ

"TDC" 7B
	A*X*		cpu.A.W = cpu.D;ALUSetNZ16(cpu.A.W)

"TSC" 3B
	A*X*		cpu.A.W = cpu.S;ALUSetNZ16(cpu.A.W)

// ====================================================================

"XBA" EB
	A*X*		MB8 = cpu.A.B.L;cpu.A.B.L = cpu.A.B.H;cpu.A.B.H = MB8;ALUSetNZ8(cpu.A.B.L)

"XCE" FB
	A*X* 		MB8 = cpu.P.E;cpu.P.E = cpu.P.C;cpu.P.C = MB8;if (cpu.P.E != 0) { cpu.P.M = cpu.P.X = 1;cpu.S = (cpu.S & 0xFF)|0x100;ALUUpdatePS(); }


// ====================================================================

"MVN #imm16" 54
	A*X* 		

"MVP #imm16" 44
	A*X* 		

"STP" DB
	A*X* 		

"WAIT" CB		
	A*X*		
